/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    //-----------------roll method------------------------------
    public static int[] roll(int n) {
        int[] rollsValues = new int[n];
        Random randomNum = new Random();
        for (int i = 0; i < rollsValues.length; i++) {
            rollsValues[i] = randomNum.nextInt(6) + 1;
        }

        return rollsValues;
    }


    //-----------------containsDuplicates method------------------------------
    public static boolean containsDuplicates(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    return true;
                }
            }
        }
        return false;

    }

    //-----------------calculatingAverages mathod------------------------------

    public static double calculatingAverages(int[] arr) {
        double arrayValuesSummation = 0.0;
        double average = 0.0;
        for (int number : arr) {
            arrayValuesSummation = arrayValuesSummation + number;

        }
        average = arrayValuesSummation / arr.length;
        return average;
    }


    //-----------------lowestAverage method------------------------------

    public static int[] lowestAverage(int[][] arr) {
        double summation = 0.0;
        double lowestAvg = 0.0;
        double avg = 0.0;
        int[] lowestAvgArray = null;
        for (int[] itemArr : arr) {
            summation = 0.0;
            avg = 0.0;
            for (int item : itemArr) {
                summation = summation + item;

            }
            avg = summation / itemArr.length;
            if (lowestAvg == 0.0) {
                lowestAvg = avg;

            } else if (avg < lowestAvg) {
                lowestAvgArray = itemArr;

                lowestAvg = avg;

            }
        }
        return lowestAvgArray;
    }

    //-----------------minMaxTemp method------------------------------

    public static String minMaxTemp(int[][] array) {
        int maxTemp = 0;
        int minTemp = 0;
        Set<Integer> temps = new HashSet<Integer>();
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                temps.add(array[i][j]);
            }
        }

        for (int item : temps) {
            if (maxTemp == 0 && minTemp == 0) {
                maxTemp = item;
                minTemp = item;
            } else if (item > maxTemp) {
                maxTemp = item;
            } else if (item < minTemp) {
                minTemp = item;
            }
        }
        System.out.println("High: " + maxTemp);
        System.out.println("Low: " + minTemp);

        for (int i = minTemp + 1; i < maxTemp; i++) {
            if (!temps.contains(i)) {
                System.out.println("Never saw temperature: " + i);
            }
        }
        return "High Temperature is " + maxTemp + " and Low Temperature is " + minTemp;
    }

//-----------------tally method------------------------------

    public static String tally(List<String> arr) {
        int voteCount = 0;
        String winnerName = "";
        Set<String> names = new HashSet<String>();
        Map<String, Integer> vote = new HashMap<String, Integer>();
        names = vote.keySet();
        for (String name : arr) {
            if (!names.contains(name)) {
                vote.put(name, 1);
            } else {
                voteCount = (int) vote.get(name);
                voteCount++;
                vote.put(name, voteCount);
            }
        }
        voteCount = 0;
        for (String s : names) {
            if (vote.get(s) > voteCount) {
                voteCount = vote.get(s);
                winnerName = s;
            }
        }

        return winnerName;
    }


}
