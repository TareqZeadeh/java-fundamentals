/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inheritance;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void restsToString() {
        Restaurant rest = new Restaurant("MAC","30");
        String str = rest.toString();
        assertEquals(str, rest.toString(), "Restaurant's reviews should be printed");
    }

    @Test
    void reviewToString(){
        Review review =new Review("very good","hasan",4);
        String str = review.toString();
        assertEquals(str, review.toString(),"Reviews of the users should be printed");
    }

    @Test
    void association(){
        Restaurant rest = new Restaurant("MAC", "30");
        Review rev = new Review("tasty","zaater",5);
        rest.addReview(rev);
        String str1 = rest.toString();
        String str2 = rev.toString();
        assertTrue(str1.contains(str2),"Restaurant's reviews should be the same as the Reviews of the users ");
    }


    //-------------------------------Lab 07 tests--------------------------------------
    @Test
    void testRestaurantConstructor(){
        Restaurant rest = new Restaurant("MAC", "$$$");
        String str=rest.toString();
        assertEquals(str,rest.toString());
    }
    @Test
    void shopReviews(){
    Shop shop = new Shop("Z" , "good" , "$$$");
    shop.addReview(new Review("good","ta",2));
        assertTrue(shop.getReviews().size() > 0 , "True if a review added to the list");

    }
    @Test
    void testShopConstructor(){
        Shop shop = new Shop("MAC","good","$$$");
        String str=shop.toString();
        assertEquals(str,shop.toString());
    }

    @Test
    void theaterTests(){
        Theater theater = new Theater("movies house");
        theater.addMovie("hi");
        theater.addMovie("hi1");
        theater.addMovie("hi2");
        assertTrue(theater.getMoviesList().size() == 3 , "True if a movies added successfully ");
        theater.removeMovie("hi1");
        assertTrue(theater.getMoviesList().size() == 2 , "True if hi1 movie removed successfully ");
        theater.addReview("hi2",new Review("gg","ta",2));
        assertTrue(theater.getReviews().size() == 1 , "True if a Review added successfully ");
        theater.addReview("hi3",new Review("gg","ta",2));
        assertTrue(theater.getReviews().size() == 1 , "True if a non existed movie in the list , nothing will be added");
        theater.addReview(new Review("gg","ta",2));
        assertTrue(theater.getReviews().size() == 2 , "True if a review without movie name added successfully");

    }
}
